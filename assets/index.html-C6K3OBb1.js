import{_ as n,c as a,a as e,o as i}from"./app-qO4zmEUw.js";const l={};function d(p,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h2 id="api-接口发展历程" tabindex="-1"><a class="header-anchor" href="#api-接口发展历程"><span>api 接口发展历程</span></a></h2><p>插件开发经历了三个阶段：</p><ul><li>使用 v8 引擎，nodejs 原生接口</li><li>NAN 方式：封装了上诉两个接口，但是如果 nodejs 版本升级，C++插件必须重新编译。</li><li>node-api：nodejs 官方提供的相对稳定的 C API 接口，保证一定版本范围内的接口稳定性，并且社区会维护 nodejs 一端维护接口可用，而不需要进行插件的重新编译。</li><li>node-addon-api：提供更简洁更稳定的 C++ API 接口。</li></ul><p>通常使用 <code>node-addon-api</code>进行开发，为了保证 ABI 的稳定性，通常引入 <code>#inlcude &quot;napi.h&quot;</code>，而不能使用 <code>node.h</code>,<code>nan.h</code>,<code>v8.h</code>。</p><p>非常友好的是，node-addon-api 是 header-only 文件，其容量也非常小。</p><p>以下是 <code>node-addon-api</code>的官方文档。</p><p><a href="https://github.com/nodejs/node-addon-api/blob/main/doc/README.md" target="_blank" rel="noopener noreferrer">https://github.com/nodejs/node-addon-api/blob/main/doc/README.md</a></p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node-gyp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node-addon-api</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建工具-node-gyp" tabindex="-1"><a class="header-anchor" href="#构建工具-node-gyp"><span>构建工具 node-gyp</span></a></h2><p>C++代码可以被编译成一个目标文件、动态库等，其后缀名为 <code>.node</code>文件，以供 nodejs 使用。</p><p>其中 <code>node-gyp</code>是当前最流行也是成为事实上的 node C++插件的标准构建工具，了解 <code>node-gyp</code>是必经之路。其依赖 python 3.x 环境。</p><h3 id="binding-gyp" tabindex="-1"><a class="header-anchor" href="#binding-gyp"><span>binding.gyp</span></a></h3><p>binding.gyp 是一份提供给 node-gyp 的配置文件，放置在项目的根目录上。</p><p>它其实就是 JSON 格式的文本文件。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;targets&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      # 表示原生模块的名字</span></span>
<span class="line"><span>      &quot;target_name&quot;: &quot;myModule&quot;,</span></span>
<span class="line"><span>      # 参与构建的源文件，不可以用通配符</span></span>
<span class="line"><span>      &quot;sources&quot;: [&quot;src/main.cpp&quot;],</span></span>
<span class="line"><span>      # 指定napi.h文件位置</span></span>
<span class="line"><span>      &quot;include_dirs&quot;: [&quot;node_modules/node-addon-api/&quot;],</span></span>
<span class="line"><span>      # 指定.node目标文件的输出目录，&lt;(module_root_dir)变量为binding.gyp所在目录</span></span>
<span class="line"><span>      &quot;product_dir&quot;: &quot;&lt;(module_root_dir)/build/Release&quot;,</span></span>
<span class="line"><span>      # 可选，指定c++标准</span></span>
<span class="line"><span>      &quot;cflags&quot;: [&quot;-std=c++11&quot;],</span></span>
<span class="line"><span>      # 指定是否开启C++异常机制，一般不开启</span></span>
<span class="line"><span>      &quot;defines&quot;: [&quot;NODE_ADDON_API_DISABLE_CPP_EXCEPTIONS&quot;],</span></span>
<span class="line"><span>      # 可选，Windows平台上指定源文件使用utf-8编码，</span></span>
<span class="line"><span>      # 解决使用中文注释可能出错的问题</span></span>
<span class="line"><span>      &quot;msvs_settings&quot;: {&quot;VCCLCompilerTool&quot;: {&quot;AdditionalOptions&quot;: [&quot;/utf-8&quot;]}},</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gyp 格式还可以嵌入 shell 命令，将标准输出作为字符串</p><p>只需要在 <code>&quot;!&lt;()&quot;</code>内写入命令</p><p>例如</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;target&quot;: {</span></span>
<span class="line"><span>    # 指定napi.h位置，但是要注意，这是依赖shell的命令，所以在Windows平台上可能有错</span></span>
<span class="line"><span>    &quot;include_dirs&quot;: [&quot;!&lt;(node -p \\&quot;require(&#39;node-addon-api&#39;).include\\&quot;)&quot;]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，构建工具中有些字符串（例如模块名称，文件目录等）经常重复出现，如果要改动则非常麻烦。gyp 在顶层提供了一个选项 <code>variables</code>来定义变量，可以在字符串中 <code>&lt;()</code>来引用。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;variables&quot;: {</span></span>
<span class="line"><span>    &quot;module_name&quot;: &quot;mytest&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;target&quot;: {</span></span>
<span class="line"><span>    &quot;target_name&quot;: &quot;&lt;(module_name)&quot;,</span></span>
<span class="line"><span>    &quot;sources&quot;: &quot;&lt;(PROJECT_DIR)/src/*.cpp&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内置变量同样也使用这种方法引用，常见的内置变量</p><ul><li><code>&lt;(module_root_dir)</code>：binding.gyp 文件所在目录</li><li><code>&lt;(PRODUCT_DIR)</code>：生成的目标文件（如 <code>.node</code> 文件）的输出目录，通常是 <code>build/Release</code> 或 <code>build/Debug</code>。</li></ul><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h2><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除build目录（构建目录）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">node-gyp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建项目</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">node-gyp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> configure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 生成项目</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">node-gyp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 重复上面三个步骤</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">node-gyp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebuild</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成项目得到的 <code>.node</code>动态链接库一般放在 Release 下。</p><h2 id="构建工具-cmake-js" tabindex="-1"><a class="header-anchor" href="#构建工具-cmake-js"><span>构建工具 cmake-js</span></a></h2><p>同样是非常好用的构建工具，依赖 cmake 环境。适用于使用已经使用 Cmake 进行构建的项目。</p><h2 id="发包策略" tabindex="-1"><a class="header-anchor" href="#发包策略"><span>发包策略</span></a></h2><p>C++开发的插件直接与平台挂钩，通常发包策略有两种：</p><ol><li>在用户桌面上进行编译，需写好 README.md，指导安装依赖环境。</li><li>提前编译，使用一些第三方库例如 <code>prebuild</code>等，判断用户平台再进行分发。</li></ol>`,31)]))}const o=n(l,[["render",d],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/article/rcc6sby5/","title":"nodejs：C++插件开发","lang":"zh-CN","frontmatter":{"title":"nodejs：C++插件开发","createTime":"2025/02/10 10:29:30","permalink":"/article/rcc6sby5/","tags":["nodejs","C++"]},"headers":[],"readingTime":{"minutes":2.9,"words":869},"git":{"updatedTime":1739180179000,"contributors":[{"name":"maxxwellatcher","username":"maxxwellatcher","email":"916284547@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/maxxwellatcher?v=4","url":"https://github.com/maxxwellatcher"}]},"filePathRelative":"nodejs：C++插件开发.md","categoryList":[]}');export{o as comp,c as data};
