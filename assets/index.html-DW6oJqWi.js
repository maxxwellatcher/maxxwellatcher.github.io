import{_ as k,c as r,a as p,d as i,e as t,b as a,w as n,r as d,o as c}from"./app-qO4zmEUw.js";const D={},v={class:"vp-file-tree"},A={class:"tree-node file"},m={class:"tree-node folder"},u={class:"tree-node folder"},g={class:"tree-node folder"},o={class:"tree-node file"},y={class:"tree-node folder"},E={class:"tree-node folder"};function b(C,s){const h=d("font"),l=d("VPIcon"),e=d("FileTreeItem");return c(),r("div",null,[s[24]||(s[24]=p(`<p><a href="https://subingwen.cn/" target="_blank" rel="noopener noreferrer">爱编程的大丙</a></p><p>【CMake 保姆级教程【C/C++】】</p><p><a href="https://www.bilibili.com/video/BV14s4y1g7Zj/?share_source=copy_web&amp;vd_source=f70b0f8b0776be81c93e8c471bd9569e" target="_blank" rel="noopener noreferrer">CMake 保姆级教程【C/C++】_哔哩哔哩_bilibili</a></p><hr><p>cmake 本质上就是一个生成 makefile 文件的工具，而 makefile 才是真正意义上的构建工具。但是，makefile 本身是依赖于平台的，而 CMake 是不依赖于平台的工具。</p><p>基本用法：</p><ol><li>安装 cmake，编写 CMakeLists.txt 文件。</li><li>在命令行中执行 cmake 命令，让 cmake 程序读取 CMakeLists.txt 文件，进行项目构建生成 makefile 文件。</li></ol><p>小细节：</p><p>命令：<code>cmake &lt;CMakeLists.txt 所在目录&gt;</code></p><p>注意，cmake 后接的是 <code>dirname</code>，而不是 <code>filename</code>！也就是说只需要目录名而不需要加上 CMakeLists.txt，因为 cmake 程序会在指定目录下搜索 CMakeLists.txt，但是 cmake 生成的项目构建相关的文件会生成在命令行当前工作目录下。</p><p>所以，通常的构建流程如下：</p><ol><li>找到 CmakeLists.txt 文件</li><li>创建 build/文件夹</li><li>进入 build/文件夹</li><li>使用命令 <code>cmake ..</code></li></ol><p>这样就可以将构建文件解耦出来，单独放在一个文件夹内。</p><hr><h1 id="注释写法" tabindex="-1"><a class="header-anchor" href="#注释写法"><span>注释写法</span></a></h1><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 井号开头</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[ </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">多行注释，使用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="cmakelists-txt-基础配置" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt-基础配置"><span>CMakeLists.txt 基础配置</span></a></h1><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基础配置</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.20) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#要求CMake最低版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 项目名称，不写双引号也没有问题</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello hello.cpp) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 由源文件生成可执行文件</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">cmake基础指令不区分大小写，但是变量区分大小写</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">使用cmake -P *.cmake 可以执行后缀为cmake的脚本文件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">在学习cmake语法时非常方便</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="cmake-可以理解为一种脚本语言" tabindex="-1"><a class="header-anchor" href="#cmake-可以理解为一种脚本语言"><span>CMake 可以理解为一种脚本语言</span></a></h1><p>CMake 本身有其脚本语法，虽然最终目的是为了构建 C++工程项目，但是作为一种脚本，按照语言的方式去学习未尝不可。</p><h2 id="cmake-文件和-cmakelists-txt-文件" tabindex="-1"><a class="header-anchor" href="#cmake-文件和-cmakelists-txt-文件"><span>*.cmake 文件和 CMakeLists.txt 文件</span></a></h2><p>cmake 是一种脚本语言，一般而言其后缀设定为 .cmake，可以通过命令 <code>cmake -P *.cmake</code>来指定执行对应的脚本文件。</p><ol><li><code>cmake -P test.cmake</code>：执行 cmake 脚本</li></ol><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 执行cmake脚本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -P</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.cmake</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在当前工作目录下查找CMakeLists.txt，创建build目录，在其中生成makefile文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -B</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 生成项目（生成相应的可执行文件）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -G选项，可以选择生成器，（即编译工具链），通常而言generator名字带空格，要用&quot;&quot;包裹起来</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -G</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">generator-nam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 从这里可以看到当前环境能够选择什么生成器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --help</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：MSVC 编译工具链和 minGW 编译工具链生成的产物不一样。</p><p>例如：</p><p>MSVC 不会生成 makefile 文件，因此也没有对应的 make 命令操作，使用 <code>cmake --build build</code> 可以生成可执行文件，放在 Debug 文件夹内。</p><p>而 MinGW 会产生 Makefile 文件，需要在 make 一下，当然也可以使用<code>cmake --build build</code>命令，这个命令本身的作用就是为了消除不同生成器的生成项目的差异。让用户用同一个命令来生成可执行文件。</p><h2 id="打印-message" tabindex="-1"><a class="header-anchor" href="#打印-message"><span>打印 message</span></a></h2><p>在控制台中打印信息，相当于其他语言中的 print、console.log、cout 等。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hello&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hel</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">lo&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这样打印出来是能识别出换行的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">([[hel</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lo]]) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 同上，这样打印出来是能识别出换行的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(he  llo) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 会自动拼接字符串，空格忽略</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(he\\ llo) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 显示空格需要转义字符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">打印结果如下</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">hello</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">hello</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">hel</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">lo</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">hel</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">lo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上 message 可以带子命令</p><ol><li>STATUS：非重要信息</li><li>WARNING：Cmake 警告，但是会继续执行</li><li>SEND_ERROR：CMake 错误, 继续执行，但是会跳过生成的步骤</li><li>FATAL_ERROR：CMake 错误, 终止所有处理过程</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hello world&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="变量-set" tabindex="-1"><a class="header-anchor" href="#变量-set"><span>变量 set</span></a></h2><h3 id="变量的定义、赋值、使用" tabindex="-1"><a class="header-anchor" href="#变量的定义、赋值、使用"><span>变量的定义、赋值、使用</span></a></h3><p>定义变量，并给变量赋值，使用 set 方法：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 定义变量</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hello&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用变量</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)),i("p",null,[s[1]||(s[1]=t("cmake 当中所有变量（包括值）的类型只有一种，即**")),a(h,{style:{"background-color":"#FBDE28"}},{default:n(()=>s[0]||(s[0]=[t("字符串")])),_:1}),s[2]||(s[2]=t("**。"))]),s[25]||(s[25]=p(`<div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var 1231231)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;1231231&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这两组本质上是一样的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>在 cmake 脚本中有一个非常令人迷惑的写法：<u>可以不给字符串值写双引号，也可以给变量名写上双引号。</u></p><p>例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># var是个变量名，hello字符串值</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;var&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> hello)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>行内大部分都不喜欢写双引号，所以对于初学者来说比较难看懂别人的 CMakeLists.txt 文件</p><h3 id="值的分隔" tabindex="-1"><a class="header-anchor" href="#值的分隔"><span>值的分隔</span></a></h3><p>既然所有的变量都只是字符串，字符串拼接是一件很自然的事情，也可以称之为给一个变量赋多个值。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var hello world!)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 打印结果是：helloworld!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的打印结果显示，set 一行实际上可以理解为</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hello&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;world!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>cmake 自动将两个值连起来了，这里使用的分隔符为空格。在 cmake 中也可以使用分号表示分隔</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var hello;world!)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>效果是一样的。</p><p>需要注意的是：无论多少个分隔符，message 都会把分隔符取消掉，将其连在一起。所以如果需要空格符号，可以直接用双引号包裹起来，或者用转义符 \\</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;hello world!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var hello\\ world)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在双引号-中使用-使用变量" tabindex="-1"><a class="header-anchor" href="#在双引号-中使用-使用变量"><span>在双引号&quot;&quot;中使用\${}使用变量</span></a></h3><p>对于只有一个值的变量来说，这可能是多此一举。但是拥有多个值的变量中，双引号的行为可以将变量的多个值打包起来，并用分隔符分号 <code>;</code>分隔开来。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var 10 20 30)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;\${var}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出结果：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">102030</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">10;20;30</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="诡异但不实用的语法" tabindex="-1"><a class="header-anchor" href="#诡异但不实用的语法"><span>诡异但不实用的语法</span></a></h3><p>其实变量名本身是字符串，适用可以用\${}来引用，既然是字符串，那么就可以适用空格来命令</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;my var&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> hello)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这是合法的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">([[my var]] world!)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#这也是合法的，这里的双引号可以用[[]]来代替</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种诡异的写法没有一点美感，也没有意义，可见 cmake 语法本身的松散，尽量不要使用这种语法。</p><h2 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表 list</span></a></h2><p>cmake 没有专门设置列表（数组）的数据结构，本质上使用 set 就可以实现相应的方法</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(mylist a0 a1 a2 a3)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>给一个变量设置多个值，那么就可以认为是定义了一个列表。</p><p>通用方法：</p><p><code>list(&lt;子命令&gt; &lt;list 变量&gt; [ 具体不同子命令对应的参数 ])</code></p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Reading</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(LENGTH &lt;list&gt; &lt;out-var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GET &lt;list&gt; &lt;element index&gt; [&lt;index&gt; ...] &lt;out-var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(JOIN &lt;list&gt; &lt;glue&gt; &lt;out-var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(SUBLIST &lt;list&gt; &lt;begin&gt; &lt;length&gt; &lt;out-var&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Search</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(FIND &lt;list&gt; &lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt; &lt;out-var&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Modification</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(APPEND &lt;list&gt; [&lt;element&gt;...])</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(REMOVE_ITEM &lt;list&gt; &lt;element&gt;)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(INSERT &lt;list&gt; &lt;index&gt; &lt;element&gt;)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(FILTER &lt;list&gt; {INCLUDE | EXCLUDE} REGEX &lt;regex&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(SORT &lt;list&gt;) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 安字典顺序排序</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(REVERSE &lt;list&gt;) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 反转列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：&lt;out-var&gt;表示定义的新变量，存放返回的值。&lt;element index&gt;指数组下标，……</p><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h2><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>if 语句</span></a></h3><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;condition </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">or</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">elseif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;condition </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">or</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量-var" tabindex="-1"><a class="header-anchor" href="#变量-var"><span>变量 var</span></a></h4><p>虽然在 cmake 当中所有值的类型都为字符串，但是在 if 语句当中 cmake 会区分表示真值或者假值的字符串：</p><p>真值：</p><ol><li>TRUE 或者 true（不区分大小写）</li><li>1</li><li>YES 或者 yes</li><li>Y 或者 y</li><li>ON 后者 on（表示启动）</li><li>不表示假值的非空字符串</li></ol><p>假值：</p>`,39)),i("ol",null,[s[6]||(s[6]=i("li",null,"FALSE 或者 false（不区分大小写）",-1)),s[7]||(s[7]=i("li",null,"0",-1)),s[8]||(s[8]=i("li",null,"NO 或者 no",-1)),s[9]||(s[9]=i("li",null,"N 或者 n",-1)),s[10]||(s[10]=i("li",null,"IGNORE（特定的设置中，会被判为假值）",-1)),i("li",null,[s[4]||(s[4]=t("NOTFOUND（")),a(h,{style:{color:"rgb(37, 41, 51)"}},{default:n(()=>s[3]||(s[3]=[t("在查找库或程序时，如果未找到，这个值表示假")])),_:1}),s[5]||(s[5]=t("）"))]),s[11]||(s[11]=i("li",null,"空字符串",-1)),s[12]||(s[12]=i("li",null,"未定义的变量",-1))]),s[26]||(s[26]=p(`<p><u>条件表达式当中 var 不需要</u><code>&lt;u&gt;\${}&lt;/u&gt;</code><u>来引用就可以直接使用。</u></p><p><u>但是需要注意的是：直接在 条件表达式中的字符串必须要用双引号或者 [[]] 包裹，否则会被判断为一个变量！例如：</u></p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出了no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出了no，尽管11是真值，但是这里true表示一个变量，但是这个true变量未定义。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#引用变量不需要\${}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -----------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;ture&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 均输出yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span>条件判断</span></a></h4><h5 id="逻辑判断" tabindex="-1"><a class="header-anchor" href="#逻辑判断"><span>逻辑判断</span></a></h5><ol><li>OR</li><li>AND</li><li>NOT</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var1 1)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var2 0)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var1 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">OR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> var2) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 可以看到这里的变量也不需要使用\${}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数值大小判断" tabindex="-1"><a class="header-anchor" href="#数值大小判断"><span>数值大小判断</span></a></h5><ol><li>LESS</li><li>GREATER</li><li>EQUAL</li><li>LESS_EQUAL</li><li>GREATER_EQUAL</li></ol><p>虽然我们知道所有的变量都是字符串，但是如果变量为数字组成的字符串，上述的符号 cmake 可以识别到并且在数值层面上进行大小比较，但是如果其中一个变量不是纯数字构成，那么就会按字典顺序进行比较。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var1 11)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var2 2)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var1 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LESS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> var2)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="字典顺序大小判断" tabindex="-1"><a class="header-anchor" href="#字典顺序大小判断"><span>字典顺序大小判断</span></a></h5><ol><li>STRLESS</li><li>STRGREATER</li><li>STREQUAL</li><li>STRLESS_EQUAL</li><li>STRGREATER_EQUAL</li></ol><p>cmake 专门提供了字典顺序比较。</p><p>注：字典顺序就是按字符串** 位置 **逐个比较他们的 ASCII 码大小，一般来说 <code>空 &lt; 数字 &lt; 大写字母 &lt; 小写字母 </code></p><h5 id="文件判断" tabindex="-1"><a class="header-anchor" href="#文件判断"><span>文件判断</span></a></h5><ol><li>EXISTS</li><li>IS_DIRECTORY</li><li>IS_SYMLINK</li><li>IS_ABSOLUTE</li></ol><p>需要注意的是：文件判断符后接的是字符串，所以必须要用 <code>\${}</code>来引用变量。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(mypath </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXISTS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${mypath}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 和前面判断符不一样，这里必须使用\${}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(yes)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(no)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach-语句" tabindex="-1"><a class="header-anchor" href="#foreach-语句"><span>foreach 语句</span></a></h3><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 形式1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;var&gt; RANGE &lt;max&gt;)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># var为局部变量，表示当前遍历到的值，idx从0开始，到数字max，左闭右闭区间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 形式2</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;var&gt; RANGE &lt;min&gt; &lt;max&gt; [&lt;step&gt;])</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#可设置循环起点以及步长，左闭右闭区间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 形式3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;var&gt; IN LISTS &lt;list&gt; [ITEMS [val1 val2 ...]] )</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 遍历list，后面的ITEMS相当于在list后临时加入几个新的值（不改变原list）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;var&gt; IN LISTS &lt;list0&gt; [list1 list2 ...])</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 按顺序遍历多个list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 形式4</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;var&gt; IN ZIP_LISTS &lt;list0&gt; [list1 list2 ...])</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 从idx为0开始同时遍历每一个list</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)),i("p",null,[s[14]||(s[14]=i("u",null,"注意：形式 1 和形式 2 的遍历范围是",-1)),i("u",null,[a(h,{style:{"background-color":"#FBDE28"}},{default:n(()=>s[13]||(s[13]=[t("左闭右闭区间")])),_:1})]),s[15]||(s[15]=i("u",null,"，这和很多语言不相同。",-1))]),s[27]||(s[27]=p(`<h4 id="zip-lists-遍历" tabindex="-1"><a class="header-anchor" href="#zip-lists-遍历"><span>ZIP_LISTS 遍历</span></a></h4><p>这个方法可以同时遍历多个 list，在每个循环体中，采用 var_idx 的方式来访问对应的 list</p><p>例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var1 1 2 3 4)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var2 one twho three)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var3 a b c d e f)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var IN ZIP_LISTS var1 var2 var3)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;\${var_0} \${var_1} \${var_2}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出结果为</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">1 one a</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">2 twho b</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">3 three c</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">4  d</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  e</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  f</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以发现，实际上 <code>\${}</code>符号实际上是可以穿透双引号&quot;&quot;来使用的。循环体的执行次数取决于 最长的 list 的长度。超出范围的 list 引用时返回空字符串。</p><h3 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句"><span>while 语句</span></a></h3><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;condition </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">or</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> var&gt;)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endwhile</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while 语句非常简单，但是也有一个坑，那就是和 if 语句中的 condition 不一样，<strong><u>if 语句中引用变量不需要使用 </u></strong><code>**&lt;u&gt;\${}&lt;/u&gt;**</code><strong><u>，但是 while 必须使用，否则会被认为是字符串。</u></strong></p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h3><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;function_name&gt; [arg0 arg1 arg2 ...])</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endfunction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 调用方式</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">function_name()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 cmake 本意并不是作为一种开发语言，而只是一种构建工具脚本语言，所以提供的函数功能很简单，仅仅只是为了提供一种可以复用的语法，所以没有返回值的概念。而且参数只是值传递，没有引用传递或者是指针传递的方法。</p><p>函数内部可以直接使用非常多常见的内置变量。例如 <code>CMAKE_SOURCE_DIR</code>，<code>CMAKE_BINARY_DIR</code>，<code>CMAKE_CURRENT_SOURCE_DIR</code>，<code>CMAKE_FUNCTION_NAME</code>等。</p><p>通过 set 的 <code>PARENT_SCOPE</code>选项可以直接改变外层作用域的变量。</p><p>例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var 10)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var 20 PARENT_SCOPE) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#在后置位加入PARENT_SCOPE，可以使用外层的变量</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endfunction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 10</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传参" tabindex="-1"><a class="header-anchor" href="#传参"><span>传参</span></a></h3><p>实际上不写函数参数的情况下，函数内使用ARGV0, ARGV1 的格式一样可以调用传进来的参数。</p><p>\${ARGV0} 表示第一个参数 \${ARGV1} 表示第二个参数 ……</p><p>cmake 给函数内部提供了预定义的三个变量</p><ol><li>ARGC：传入的参数总数</li><li>ARGV：传入的所有参数</li><li>ARGN：没有显式提供参数名的参数，也成为可选参数</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;3.可以使用一些预定义的变量访问可选参数:ARGC, ARGV, ARGN&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(name_list name1 name2)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;argument count: \${ARGC}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;all arguments: \${ARGV}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;optional arguments: \${ARGN}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endfunction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name_list(Jack Kate Jony Tom)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;----------------------------------------&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name_list(Jack Kate)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出结果：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">argument count: 4</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">all arguments: Jack;Kate;Jony;Tom</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">optional arguments: Jony;Tom</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">----------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">argument count: 2</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">all arguments: Jack;Kate</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">optional arguments:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 ARGV0，ARGV1，……这样的方式去调用对应位置的参数。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(name_list)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${ARGV0}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${ARGV1}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endfunction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name_list(A B)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># A</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># B</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于传参的细节：</p><p>实际上使用 <code>\${}</code>没办法直接将一个 list 传入，因为本质上 cmake 并没有 list 的数据结构。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var 10 11 12)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(messagelist arg)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${ARGC}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    foreach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var IN LISTS arg)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    endforeach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(var IN LISTS arg)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endfunction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">messagelist(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${var}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这种方式传递，相当于js的展开运算符，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># arg只是接受到了第一个参数10，而11、12作为了可选参数传进了函数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 3</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">messagelist(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;\${var}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用双引号&quot;&quot;将var打包传入，那么第一个参数就接收到了变量所有的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 10</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 11</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏"><span>宏</span></a></h2><p>宏是个强大且灵活的工具，但是其实并不好用，尽量少写，能理解其作用机制就足够了。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">macro</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(&lt;macro_name&gt; [arg ...])</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endmcro()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>宏的使用上与函数非常像，甚至可以使用 ARGV,ARGC,ARGN 这些内置变量，使用上和函数一样。</p><h3 id="与函数的区别" tabindex="-1"><a class="header-anchor" href="#与函数的区别"><span>与函数的区别</span></a></h3><ol><li>宏函数不会创建局部作用域</li><li>按值传参，参数会被直接展开成字符串</li></ol><p>虽然宏可以理解为文本替换，但需要明确的是：宏函数并不只是替换了&lt;commands&gt;内容，还替换了参数以及内置变量。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">macro</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> myVar)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;new value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;argument: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endmacro</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;First value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${myVar}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出结果：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">myVar: First value</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">argument: First value</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">myVar: new value</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，令人感到诡异的是 argument 输出的是 First value 而不是 new value！</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;First value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;new value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;argument: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 以上是错误的理解，以为Test(\${myVar})只是将宏进行简单的文本替换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上宏还会展开参数，将参数也进行了文本替换！</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;First value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#[[ Test(\${myVar})替换成了Test(&quot;First value&quot;) ]]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(myVar </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;new value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;argument: First value&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 宏的参数已经进行了替换，不再是变量</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;myVar: \${myVar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用 <code>Test(\${myVar})</code> 时，<code>\${myVar}</code> 已经在宏调用之前被展开，因此传递给宏的是其值 <code>&quot;First value&quot;</code>。</p><p>而宏内部的 <code>set(myVar &quot;new value&quot;)</code> 会直接修改全局作用域的 <code>myVar</code>。 因为本质上并没有创建局部作用域。</p><h2 id="作用域-cmake-脚本嵌套" tabindex="-1"><a class="header-anchor" href="#作用域-cmake-脚本嵌套"><span>作用域（Cmake 脚本嵌套）</span></a></h2><ol><li>函数作用域(Function scope)</li><li>目录作用域(Directory scope)</li></ol><h2 id="目标-target-概念" tabindex="-1"><a class="header-anchor" href="#目标-target-概念"><span>目标（target）概念</span></a></h2><p>在CMake中，“目标”（<code>target</code>）是一个通用的概念，代表你在构建系统中要生成的最终结果或中间结果。目标通常是以下几种类型之一：</p><ol><li>可执行文件</li><li>静态库</li><li>动态库</li><li>接口库</li></ol><p>CMake的发展趋势是更强调目标（target）为中心的配置方式，现代 CMake 有很多命令中加入 <code>target</code> 字样，提供新的一组方法。这个目的是为了更精准地控制每个 target 的依赖关系。</p><h1 id="cmake-构建项目" tabindex="-1"><a class="header-anchor" href="#cmake-构建项目"><span>cmake 构建项目</span></a></h1><h2 id="方式一-在-add-executable-写所有源文件" tabindex="-1"><a class="header-anchor" href="#方式一-在-add-executable-写所有源文件"><span>方式一：在 add_executable()写所有源文件</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">project_dir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.cpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用于简单工程，最简单的配置</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.20.0)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(out main.cpp src/a.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在这里写好所有的源文件即可，其中要写相对路径指明</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方式二-使用-include-调用子目录的-cmake-文件" tabindex="-1"><a class="header-anchor" href="#方式二-使用-include-调用子目录的-cmake-文件"><span>方式二：使用 include 调用子目录的 *.cmake 文件</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">project_dir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> src.cmake</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.cpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.h</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b.cpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b.h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CMakeLists.txt 当中调用子目录的 cmake 脚本，在 cmake 脚本中定义源文件的变量，并在 CMakeLists.txt 中调用它。</p><p>实际上只是方式一的变种。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.20.0)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(src/src.cmake)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(out </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${sources}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sources</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> src/a.cpp src/b.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需要注意的是：src.cmake 当中写源文件的路径的时候必须要使用源文件相对于CMakeLists.txt 的路径，因为 include 无非只是参数传递，在CMakeLists.txt 中使用子目录下的 cmake 脚本变量也只是用了其字符串，cmake 并不会根据文件位置改变字符串。</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>工程目录结构：头文件和源文件分开，源文件放在 src 目录下，头文件放在 include 目录下。</p>`,61)),i("div",v,[i("ul",null,[a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",A,[a(l,{name:"vscode-icons:file-type-text"}),s[16]||(s[16]=i("span",{class:"name"},"CMakeLists.txt",-1))])]),_:1}),a(e,{type:"folder",expanded:!1,empty:!0},{default:n(()=>[i("span",m,[a(l,{name:"vscode-icons:default-folder"}),s[17]||(s[17]=i("span",{class:"name"},"build",-1))])]),_:1}),a(e,{type:"folder",expanded:!1,empty:!1},{default:n(()=>[i("span",u,[a(l,{name:"vscode-icons:default-folder"}),s[18]||(s[18]=i("span",{class:"name"},"inlcude",-1))]),i("ul",null,[a(e,{type:"folder",expanded:!1,empty:!0},{default:n(()=>[i("span",g,[a(l,{name:"vscode-icons:default-folder"}),s[19]||(s[19]=i("span",{class:"name"},"project0",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",o,[a(l,{name:"vscode-icons:file-type-c"}),s[20]||(s[20]=i("span",{class:"name"},"project1.h",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>s[21]||(s[21]=[i("span",{class:"tree-node file"},[i("span",{class:"name"},"...")],-1)])),_:1})])]),_:1}),a(e,{type:"folder",expanded:!1,empty:!0},{default:n(()=>[i("span",y,[a(l,{name:"vscode-icons:folder-type-src"}),s[22]||(s[22]=i("span",{class:"name"},"src",-1))])]),_:1}),a(e,{type:"folder",expanded:!1,empty:!0},{default:n(()=>[i("span",E,[a(l,{name:"vscode-icons:folder-type-test"}),s[23]||(s[23]=i("span",{class:"name"},"test",-1))])]),_:1})])]),s[28]||(s[28]=p(`<div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置CMake的最低版本要求</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置项目名称和版本</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(my_project </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 1.0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置C++标准</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD 14)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">True</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 包含头文件目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/include)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 添加可执行文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SOURCES</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;src/*.cpp&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(my_project </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${SOURCES}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果有测试文件，可以添加测试可执行文件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># add_executable(test_my_project tests/test_my_class.cpp src/my_class.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启用测试</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># enable_testing()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># add_test(NAME test_my_project COMMAND test_my_project)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果有第三方库，可以在这里添加</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># find_package(SomeLibrary REQUIRED)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># target_link_libraries(my_project SomeLibrary::SomeLibrary)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置输出目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EXECUTABLE_OUTPUT_PATH</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/bin)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">LIBRARY_OUTPUT_PATH</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="其余配置" tabindex="-1"><a class="header-anchor" href="#其余配置"><span>其余配置</span></a></h1><h2 id="cmake-cxx-standard-变量" tabindex="-1"><a class="header-anchor" href="#cmake-cxx-standard-变量"><span>CMAKE_CXX_STANDARD 变量</span></a></h2><p>全局变量</p><p>用来设置源文件使用的语法标准，相当编译时使用 <code>-std=c++11</code>参数</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD 11)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置使用的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="project-source-dir-变量" tabindex="-1"><a class="header-anchor" href="#project-source-dir-变量"><span>PROJECT_SOURCE_DIR 变量</span></a></h2><p>全局变量</p><p>返回调用 project 命令调用的文件所在位置。一般而言就是项目最顶层的 CMakeLists.txt 的文件位置</p><h2 id="executable-output-path-变量" tabindex="-1"><a class="header-anchor" href="#executable-output-path-变量"><span>EXECUTABLE_OUTPUT_PATH 变量</span></a></h2><p>全局变量</p><p>设置可执行文件的导出位置</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EXECUTABLE_OUTPUT_PATH</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/exec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="library-output-path-变量" tabindex="-1"><a class="header-anchor" href="#library-output-path-变量"><span>LIBRARY_OUTPUT_PATH 变量</span></a></h2><p>全局变量</p><p>设置库的导出位置</p><h2 id="aux-source-directory-dir-var-命令" tabindex="-1"><a class="header-anchor" href="#aux-source-directory-dir-var-命令"><span>aux_source_directory(&lt;dir&gt; &lt;var&gt;)命令</span></a></h2><p>用来搜索某个文件目录下的所有源文件，并存放在 var 变量当中。</p><p>dir 是绝对路径，通常 配合 <code>PROJECT_SOURCE_DIR</code>使用，将源文件（不包括其他文件 ）存储到 var 变量当中。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/src source_files)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 搜索得到所有的源文件（不包括头文件）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-命令" tabindex="-1"><a class="header-anchor" href="#file-命令"><span>file()命令</span></a></h2><p>文件操作命令，拥有非常多的子命令可以对项目的文件进行操作。</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 搜索文件并存放到var变量中</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB &lt;var&gt; &lt;relative_path&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 例： file(GLOB source_files &quot;src/*.cpp&quot;)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 可以使用*或**去匹配</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB_RECURSE &lt;var&gt; &lt;relative_path&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># GLOB_RECURSE的作用同上，区别在于该子命令会递归搜索给定目录及其子目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 例：file(GLOB_RECURSE source_files &quot;src/*.cpp&quot;)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 会搜索src下及其子目录下所有.cpp源文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(RENAME &lt;old_filename&gt; &lt;new_filename&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 更改名字</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(MAKE_DIRECTORY [&lt;directory1&gt; ...])</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建文件夹</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是：cmake 是单次解析的，也就是说在 cmake 构建过程中使用这些命令改变了文件，但是其他命令无法感知已经进行了更改！最佳实践是不要在 cmake 中使用这些命令。如果项目需要创建文件夹或者修改文件，请直接在外部实现或者用其他脚本来实现！</p><p>file 命令最常用和最实用的命令也就是 <code>GLOB/GLOB_RECURESE</code>！</p><h2 id="include-directories-path-弃用" tabindex="-1"><a class="header-anchor" href="#include-directories-path-弃用"><span>include_directories(&lt;path&gt;) （弃用）</span></a></h2><p>指定头文件所在目录，那么在源文件中写 <code>#include</code>时就不需要写明路径</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">project_dir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> src/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> include/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> project_name/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Build/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMakeLists.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.11)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;include&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这里只需要写include就行不需要具体到project_name</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这样在源文件中写#include &quot;project_name/a.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在源文件写相对与include的路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="target-include-directories-path-path1-path2" tabindex="-1"><a class="header-anchor" href="#target-include-directories-path-path1-path2"><span>target_include_directories(&lt;path&gt; [path1 path2 ... ])</span></a></h2><p>现代 CMake 的导入头文件的用法，优先使用这个方法。</p><h2 id="add-library-target-private-public-interface-sourcefile1" tabindex="-1"><a class="header-anchor" href="#add-library-target-private-public-interface-sourcefile1"><span>add_library(&lt;target&gt; [&lt;PRIVATE | PUBLIC | INTERFACE&gt;] [sourcefile1 ... ])</span></a></h2><p>制作库，可以是静态库也可以是动态库</p><p>对应的子命令有</p><ol><li>STATIC：静态库</li><li>SHARED：动态库</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB source_files </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;src/*.cpp&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> STATIC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${source_files}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#--------------------------</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">test</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${source_files}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#默认时SHARED制作动态库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，生成的最终的库的文件名，与 cmake 中所命名是有区别的。最终生成库的名字会在前缀加上 <code>lib</code>，而后缀会根据平台而定。在 Windows 上是 <code>.dll</code>或者是 <code>.lib</code>，在 Linux 平台上是 <code>.so</code>或者是 <code>.a</code>。</p><h2 id="link-libraries-target-弃用" tabindex="-1"><a class="header-anchor" href="#link-libraries-target-弃用"><span>link_libraries(&lt;target&gt;)（弃用）</span></a></h2><h2 id="target-link-libraries-target-private-public-interface-lib1-lib2" tabindex="-1"><a class="header-anchor" href="#target-link-libraries-target-private-public-interface-lib1-lib2"><span>target_link_libraries(&lt;target&gt; [&lt;PRIVATE | PUBLIC | INTERFACE&gt;] &lt;lib1&gt; &lt;lib2&gt; ... )</span></a></h2><p>该命令必须要在 <code>add_executale</code>之后。</p><p>使用 <code>PRIVATE</code>、<code>PUBLIC</code>、<code>INTERFACE</code> 的最佳实践</p><ul><li>PRIVATE：如果当前目标只在内部使用某个库，而其他依赖此目标的目标不需要该库的符号或接口，将依赖设为 <code>PRIVATE</code>。</li><li>PUBLIC：如果当前目标依赖的库也需要被其他依赖此目标的目标使用，则设为 <code>PUBLIC</code>。</li><li>INTERFACE：如果当前目标不需要直接链接该库，但它的依赖目标需要（例如接口库），可使用 <code>INTERFACE</code>。</li></ul><h2 id="link-directories-path-path1-path2" tabindex="-1"><a class="header-anchor" href="#link-directories-path-path1-path2"><span>link_directories(&lt;path&gt; [path1 path2 ... ])</span></a></h2><p>指定动态库</p><h2 id="find-library-var-lib-name-path1-path2" tabindex="-1"><a class="header-anchor" href="#find-library-var-lib-name-path1-path2"><span>find_library(&lt;var&gt; &lt;lib_name&gt; [path1 path2 ... ])</span></a></h2><p>如果没有提供库的查找路径(path1 path2)，那么就在系统默认的库目录（<code>/usr/lib/</code>,<code>/usr/local/lib</code>）查找库。</p><h2 id="find-package" tabindex="-1"><a class="header-anchor" href="#find-package"><span>find_package()</span></a></h2><h1 id="指定生成器" tabindex="-1"><a class="header-anchor" href="#指定生成器"><span>指定生成器</span></a></h1><p>在 windows 操作系统中，可能希望使用 MinGW 工具来编译，但是 cmake 在 Windows 平台上默认使用 MSVC 当做默认的生成器。</p><p>通常我们会使用 <code>-G</code>来指定生成器：<code>cmake -G &quot;MinGW Makefiles&quot;</code>。通过 <code>cmake --help</code>可以查看当前机器所支持的生成器。</p>`,50))])}const F=k(D,[["render",b],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/article/pfi2rshh/","title":"CMake","lang":"zh-CN","frontmatter":{"title":"CMake","createTime":"2024/02/10 21:31:13","permalink":"/article/pfi2rshh/","tags":["C++"]},"headers":[],"readingTime":{"minutes":17.71,"words":5314},"git":{"updatedTime":1740041379000,"contributors":[{"name":"maxxwellatcher","username":"maxxwellatcher","email":"916284547@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/maxxwellatcher?v=4","url":"https://github.com/maxxwellatcher"}]},"filePathRelative":"cpp/CMake.md","categoryList":[{"id":"2c5f2c","sort":10003,"name":"cpp"}]}');export{F as comp,f as data};
